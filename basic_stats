#!/usr/bin/awk -f

BEGIN {
    orig_field = field;
    if(!scalar) {
        scalar = 1;
    }
    if(!buckets) {
        buckets = 10;
    }
    if(!nines) {
        nines = 2;
    }
    sum = 0;
    count = 0;
    rx = "([0-9]+(\\.[0-9]+)?)";
    perfect_rx = "^"rx"$";
}

{
    matched = 0;
}

!orig_field {
    field = NF;
}

$field ~ perfect_rx {
    add($field);
}

!matched && $field ~ rx {
    match($field, rx, results);
    add(results[1]);
}


function add(field) {
    field = field * scalar;
    sum += field;
    items[count] = field;
    count += 1;
    matched=1;
}

function stdev(avg, N, items) {
    var = 0;
    for(i = 0; i < N; i++) {
        var += (items[i] - avg)**2;
    }
    var = var / (N + 1);
    return var ** .5;
}

function print_quartiles(N, items) {
    print "Min:", items[1];
    print "Q1:", items[int(N/4)];
    print "Median:", items[int(N/2)];
    print "Q3:", items[int(3*N/4)];
    print "Max:", items[N];
}

function print_histogram(N, items) {
    print "\nHistogram"
    bucket = int(N / buckets);
    for(t = 1; t < buckets; t++) {
        printf("%s%: %s\n", (100*t * bucket) / N, items[t*bucket]);
    }

    print "\nNines"
    cur_nine = 0.0
    for(n=0; n < nines; n++) {
       cur_nine = (cur_nine / 10) + .9
       printf("%s%: %s\n", 100*cur_nine, items[int(cur_nine * N)]);
    }
}

END {
    print "Count:", count;
    print "Sum:", sum;

    average = sum/count;

    # Get standard deviation
    std = stdev(average, count, items);
    printf "Variance: %.3f\n", var;
    printf "Stdev: %.3f\n", std;

    # Get Average and 95% CI
    err = 1.96 * (std/(count**.5));
    printf("Average: %.3f < %.3f < %.3f\n",average - err, average, average + err);

    # Sort the array by increasing items
    n = asort(items);

    print_quartiles(count, items);
    print_histogram(count, items);
}
